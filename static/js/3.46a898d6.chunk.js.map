{"version":3,"sources":["components/comment/messages/messages.module.css","components/comment/dialogs/dialogs.jsx","components/comment/messages/messages.jsx","components/comment/messages/massage_form.jsx","components/comment/coment.jsx","components/hoc/withAuthRedirect.js","components/comment/comentcontainer.jsx"],"names":["module","exports","Dialogs","props","path","id","className","classes","navlink","to","name","Messeges","message","maxLength50","maxLengthCreator","MassageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Massageform","SendMessage","Coment","state","DialogsData","DialogsElement","React","createRef","map","d","messagesElements","Messages","m","newMessageBody","Container","Row","Col","massage","mapStateToPropsForRedirect","isAuth","AuthData","compose","connect","dispatch","text","SendMessagecreator","Component","RedirectComponent","this"],"mappings":"uIACAA,EAAOC,QAAU,CAAC,QAAU,4B,gICWbC,EATC,SAACC,GACb,IAAIC,EAAO,WAAaD,EAAME,GAC9B,OACJ,oCACI,kBAAC,IAAD,CAASC,UAAWC,IAAQC,QAASC,GAAIL,GAAOD,EAAMO,MACtD,+BCGWC,G,OATE,SAACR,GACd,OACJ,oCACA,6BACKA,EAAMS,Y,kCCFLC,EAAcC,YAAiB,IAa/BC,EAAmBC,YAAU,CAACC,KAAM,2BAAjBD,EAZF,SAACb,GACpB,OACI,0BAAMe,SAAUf,EAAMgB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUX,GACrBY,YAAY,qBAAqBf,KAAK,oBAEjD,4CAMEgB,EAAc,SAACvB,GACzB,OAAO,6BACH,kBAACY,EAAD,CAAkBG,SAAUf,EAAMwB,gBCiB3BC,EA5BA,SAACzB,GAEZ,IAAI0B,EAAQ1B,EAAM2B,YAKdC,GADgBC,IAAMC,YACLJ,EAAM3B,QAAQgC,KAAK,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAS9B,GAAI8B,EAAE9B,GAAIK,KAAMyB,EAAEzB,WACpE0B,EAAmBP,EAAMQ,SAASH,KAAK,SAAAI,GAAC,OAAI,kBAAC,EAAD,CAAS1B,QAAS0B,EAAE1B,aAC/CiB,EAAMU,eAE/B,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,KAAMX,GACN,kBAACW,EAAA,EAAD,KACI,6BACKN,GAET,6BACI,kBAAC,EAAD,CAAaT,YAjBH,SAACgB,GACfxC,EAAMwB,YAAYgB,W,yDCVtBC,EAA6B,SAACf,GAAD,MAAY,CACzCgB,OAAQhB,EAAMiB,SAASD,S,QCkBZE,sBACXC,aANkB,SAACnB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBATL,SAACmB,GACnB,MAAM,CACFtB,YAAa,SAACuB,GACVD,EAASE,YAAmBD,UDNR,SAACE,GAAe,IAEtCC,EAFqC,uKAInC,OAAKC,KAAKnD,MAAM0C,OAET,kBAACO,EAAcE,KAAKnD,OAFI,kBAAC,IAAD,CAAUM,GAAG,eAJT,GAEXuB,IAAMoB,WAUtC,OAFqCJ,YAAQJ,EAARI,CAAoCK,KCK9DN,CAGbnB","file":"static/js/3.46a898d6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"messages_message__2XZvm\"};","import React from 'react';\nimport classes from './dialogs.module.css';\nimport { NavLink } from 'react-router-dom';\nconst Dialogs = (props) => {\n    let path = \"/coment/\" + props.id;\n    return (\n<>\n    <NavLink className={classes.navlink} to={path}>{props.name}</NavLink>\n    <br/>\n</>\n    );\n}\nexport default Dialogs;","import React from 'react';\nimport classes from './messages.module.css';\nconst Messeges = (props) => {\n    return (\n<>\n<div>\n    {props.message}\n</div>\n</>\n    );\n}\nexport default Messeges;","import {Field, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../FormsControls/FormsControls\";\r\nconst maxLength50 = maxLengthCreator(50);\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength50]}\r\n                       placeholder='Enter your message' name=\"newMessageBody\" />\r\n            </div>\r\n            <button>Send</button>\r\n        </form>\r\n    )\r\n}\r\nconst MassageReduxForm = reduxForm({form: 'dialog-add-message-form'})(AddMessageForm);\r\n\r\nexport  const Massageform = (props) => {\r\n    return <div>\r\n        <MassageReduxForm onSubmit={props.SendMessage} />\r\n    </div>\r\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport classes from './coment.module.css';\nimport { Container, Row, Col, Nav, Button, Navbar, Form, FormControl} from 'react-bootstrap';\nimport Dialogs from './dialogs/dialogs';\nimport Message from \"./messages/messages\";\nimport {Massageform} from \"./messages/massage_form\";\n\n\n\nconst Coment = (props) => {\n\n    let state = props.DialogsData;\n    let SendMessage = (massage) =>{\n        props.SendMessage(massage);\n    }\n    let newPostElemet = React.createRef();\n    let DialogsElement = state.Dialogs.map( d => <Dialogs id={d.id} name={d.name} /> );\n    let messagesElements = state.Messages.map( m => <Message message={m.message}/> );\n    let newMessageBody = state.newMessageBody;\n\nreturn (\n    <Container>\n        <Row>\n        <Col>{DialogsElement}</Col>\n        <Col>\n            <div>\n                {messagesElements}\n            </div>\n        <div>\n            <Massageform SendMessage={SendMessage} />\n        </div>\n        </Col>\n        </Row>\n    </Container>\n    );\n}\n\nexport default Coment;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.AuthData.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n\r\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Coment from './coment';\nimport {connect} from \"react-redux\";\nimport {SendMessagecreator} from '../../redux/state/DialogsData_reducer';\nimport {Redirect, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\n\nlet DispatchToProps = (dispatch) =>{\n    return{\n        SendMessage: (text) =>{\n            dispatch(SendMessagecreator(text));\n        }\n    }\n}\nlet mapStateToProps = (state) => {\n    return {\n        DialogsData: state.DialogsData\n    }\n}\nexport default compose(\n    connect(mapStateToProps, DispatchToProps),\nwithAuthRedirect\n)(Coment);\n\n"],"sourceRoot":""}